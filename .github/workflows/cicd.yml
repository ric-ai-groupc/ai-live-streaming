name: vuejs cicd

on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  compile-and-build:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
          cache: "npm"
      
      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint
        continue-on-error: true

      - name: Compile
        run: npm run build:prd

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 6

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/ric-ai-groupc/${{ github.event.repository.name }}:latest
            ghcr.io/ric-ai-groupc/${{ github.event.repository.name }}:${{ steps.short-sha.outputs.sha }}

      - name: SSH to server and update
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /root

            check_service_status() {
                local service_name="$1"
                
                local service_info=$(docker compose ps --format json | jq -r --arg service "$service_name" '
                    select(.Service == $service) | {
                        state: .State,
                        status: .Status
                    }
                ')
                
                if [ -z "$service_info" ]; then
                    echo "Service '$service_name' not found"
                    return 1
                fi
                
                local state=$(echo "$service_info" | jq -r '.state')
                local status=$(echo "$service_info" | jq -r '.status')
                
                if [ "$state" = "running" ]; then
                    echo "Service '$service_name' is running (Status: $status)"
                    return 0
                else
                    echo "Service '$service_name' is not running (State: $state, Status: $status)"
                    return 1
                fi
            }

            docker compose pull ${{ github.event.repository.name }}
            if check_service_status "${{ github.event.repository.name }}"; then
                echo "Service is healthy - proceeding with restart"
                docker rm ${{ github.event.repository.name }} -f
                docker compose up -d ${{ github.event.repository.name }}
            else
                echo "Service is not running - starting it up"
                docker compose up -d ${{ github.event.repository.name }}
            fi
